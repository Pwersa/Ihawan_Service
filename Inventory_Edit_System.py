##### Ihawan Service - INVENTORY EDIT SYSTEM #####

import mysql.connector
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox

class Ui_edit_inventory(object):
    def connectDatabase(self):
        self.mydb = mysql.connector.connect(
            host="localhost",
            user="root",
            password="Admin123",
            database="ihawan",
        )
        self.mycursor = self.mydb.cursor()

    def setupUi(self, edit_inventory):
        self.edit = edit_inventory
        edit_inventory.setObjectName("edit_inventory")
        edit_inventory.setWindowModality(QtCore.Qt.ApplicationModal)
        edit_inventory.resize(640, 573)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(edit_inventory.sizePolicy().hasHeightForWidth())
        edit_inventory.setSizePolicy(sizePolicy)
        edit_inventory.setMinimumSize(QtCore.QSize(0, 0))
        edit_inventory.setMaximumSize(QtCore.QSize(640, 594))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(229, 181, 2))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(94, 38, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(141, 57, 22))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 47, 18))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 19, 8))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 25, 10))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 47, 18))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(229, 181, 2))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(94, 38, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(141, 57, 22))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 47, 18))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 19, 8))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 25, 10))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 47, 18))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 19, 8))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(94, 38, 15))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(141, 57, 22))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 47, 18))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 19, 8))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(62, 25, 10))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 19, 8))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(47, 19, 8))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 47, 18))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(117, 47, 18))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        edit_inventory.setPalette(palette)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/676723.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        edit_inventory.setWindowIcon(icon)
        self.frame = QtWidgets.QFrame(edit_inventory)
        self.frame.setGeometry(QtCore.QRect(9, 15, 621, 64))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(621, 64))
        self.frame.setMaximumSize(QtCore.QSize(621, 64))
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame.setObjectName("frame")
        self.title_label = QtWidgets.QLabel(self.frame)
        self.title_label.setGeometry(QtCore.QRect(0, 14, 619, 36))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label.sizePolicy().hasHeightForWidth())
        self.title_label.setSizePolicy(sizePolicy)
        self.title_label.setMinimumSize(QtCore.QSize(0, 0))
        self.title_label.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(22)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.title_label.setFont(font)
        self.title_label.setObjectName("title_label")
        self.frame_2 = QtWidgets.QFrame(edit_inventory)
        self.frame_2.setGeometry(QtCore.QRect(9, 91, 621, 161))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setMinimumSize(QtCore.QSize(621, 45))
        self.frame_2.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame_2.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame_2.setObjectName("frame_2")
        self.quantity = QtWidgets.QSpinBox(self.frame_2)
        self.quantity.setGeometry(QtCore.QRect(247, 50, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.quantity.sizePolicy().hasHeightForWidth())
        self.quantity.setSizePolicy(sizePolicy)
        self.quantity.setMinimumSize(QtCore.QSize(121, 23))
        self.quantity.setMaximumSize(QtCore.QSize(121, 23))
        self.quantity.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.quantity.setMinimum(0)
        self.quantity.setSingleStep(1)
        self.quantity.setProperty("value", 0)
        self.quantity.setDisplayIntegerBase(10)
        self.quantity.setObjectName("quantity")
        self.pushButton = QtWidgets.QPushButton(self.frame_2)
        self.pushButton.setGeometry(QtCore.QRect(389, 50, 91, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton.sizePolicy().hasHeightForWidth())
        self.pushButton.setSizePolicy(sizePolicy)
        self.pushButton.setMinimumSize(QtCore.QSize(91, 23))
        self.pushButton.setMaximumSize(QtCore.QSize(91, 23))
        self.pushButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_2.setGeometry(QtCore.QRect(501, 50, 91, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_2.sizePolicy().hasHeightForWidth())
        self.pushButton_2.setSizePolicy(sizePolicy)
        self.pushButton_2.setMinimumSize(QtCore.QSize(91, 23))
        self.pushButton_2.setMaximumSize(QtCore.QSize(91, 23))
        self.pushButton_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_2.setObjectName("pushButton_2")
        self.products = QtWidgets.QComboBox(self.frame_2)
        self.products.setGeometry(QtCore.QRect(26, 50, 200, 22))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.products.sizePolicy().hasHeightForWidth())
        self.products.setSizePolicy(sizePolicy)
        self.products.setMinimumSize(QtCore.QSize(200, 22))
        self.products.setMaximumSize(QtCore.QSize(200, 22))
        self.products.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.products.setObjectName("products")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icon/676723.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.products.addItem(icon1, "")
        self.title_label_2 = QtWidgets.QLabel(self.frame_2)
        self.title_label_2.setGeometry(QtCore.QRect(0, 3, 611, 36))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label_2.sizePolicy().hasHeightForWidth())
        self.title_label_2.setSizePolicy(sizePolicy)
        self.title_label_2.setMinimumSize(QtCore.QSize(611, 36))
        self.title_label_2.setMaximumSize(QtCore.QSize(611, 36))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title_label_2.setFont(font)
        self.title_label_2.setObjectName("title_label_2")
        self.title_label_3 = QtWidgets.QLabel(self.frame_2)
        self.title_label_3.setGeometry(QtCore.QRect(1, 79, 611, 36))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label_3.sizePolicy().hasHeightForWidth())
        self.title_label_3.setSizePolicy(sizePolicy)
        self.title_label_3.setMinimumSize(QtCore.QSize(611, 36))
        self.title_label_3.setMaximumSize(QtCore.QSize(611, 36))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title_label_3.setFont(font)
        self.title_label_3.setObjectName("title_label_3")
        self.price_2 = QtWidgets.QSpinBox(self.frame_2)
        self.price_2.setGeometry(QtCore.QRect(247, 119, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.price_2.sizePolicy().hasHeightForWidth())
        self.price_2.setSizePolicy(sizePolicy)
        self.price_2.setMinimumSize(QtCore.QSize(121, 23))
        self.price_2.setMaximumSize(QtCore.QSize(121, 23))
        self.price_2.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.price_2.setMinimum(0)
        self.price_2.setSingleStep(1)
        self.price_2.setProperty("value", 0)
        self.price_2.setDisplayIntegerBase(10)
        self.price_2.setObjectName("price_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_3.setGeometry(QtCore.QRect(386, 120, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_3.sizePolicy().hasHeightForWidth())
        self.pushButton_3.setSizePolicy(sizePolicy)
        self.pushButton_3.setMinimumSize(QtCore.QSize(121, 23))
        self.pushButton_3.setMaximumSize(QtCore.QSize(121, 23))
        self.pushButton_3.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_3.setObjectName("pushButton_3")
        self.frame_3 = QtWidgets.QFrame(edit_inventory)
        self.frame_3.setGeometry(QtCore.QRect(10, 260, 301, 301))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_3.sizePolicy().hasHeightForWidth())
        self.frame_3.setSizePolicy(sizePolicy)
        self.frame_3.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_3.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame_3.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame_3.setObjectName("frame_3")
        self.quantity_2 = QtWidgets.QSpinBox(self.frame_3)
        self.quantity_2.setGeometry(QtCore.QRect(30, 102, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.quantity_2.sizePolicy().hasHeightForWidth())
        self.quantity_2.setSizePolicy(sizePolicy)
        self.quantity_2.setMinimumSize(QtCore.QSize(121, 23))
        self.quantity_2.setMaximumSize(QtCore.QSize(121, 23))
        self.quantity_2.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.quantity_2.setMinimum(0)
        self.quantity_2.setSingleStep(1)
        self.quantity_2.setProperty("value", 0)
        self.quantity_2.setDisplayIntegerBase(10)
        self.quantity_2.setObjectName("quantity_2")
        self.title_label_5 = QtWidgets.QLabel(self.frame_3)
        self.title_label_5.setGeometry(QtCore.QRect(10, 10, 171, 36))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label_5.sizePolicy().hasHeightForWidth())
        self.title_label_5.setSizePolicy(sizePolicy)
        self.title_label_5.setMinimumSize(QtCore.QSize(0, 0))
        self.title_label_5.setMaximumSize(QtCore.QSize(611, 36))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title_label_5.setFont(font)
        self.title_label_5.setObjectName("title_label_5")
        self.title_label_6 = QtWidgets.QLabel(self.frame_3)
        self.title_label_6.setGeometry(QtCore.QRect(25, 77, 91, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label_6.sizePolicy().hasHeightForWidth())
        self.title_label_6.setSizePolicy(sizePolicy)
        self.title_label_6.setMinimumSize(QtCore.QSize(0, 0))
        self.title_label_6.setMaximumSize(QtCore.QSize(611, 36))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title_label_6.setFont(font)
        self.title_label_6.setObjectName("title_label_6")
        self.price_3 = QtWidgets.QSpinBox(self.frame_3)
        self.price_3.setGeometry(QtCore.QRect(30, 162, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.price_3.sizePolicy().hasHeightForWidth())
        self.price_3.setSizePolicy(sizePolicy)
        self.price_3.setMinimumSize(QtCore.QSize(121, 23))
        self.price_3.setMaximumSize(QtCore.QSize(121, 23))
        self.price_3.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.price_3.setMinimum(0)
        self.price_3.setSingleStep(1)
        self.price_3.setProperty("value", 0)
        self.price_3.setDisplayIntegerBase(10)
        self.price_3.setObjectName("price_3")
        self.addProduct_2 = QtWidgets.QLineEdit(self.frame_3)
        self.addProduct_2.setGeometry(QtCore.QRect(30, 42, 200, 22))
        self.addProduct_2.setObjectName("addProduct_2")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_8.setGeometry(QtCore.QRect(90, 260, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_8.sizePolicy().hasHeightForWidth())
        self.pushButton_8.setSizePolicy(sizePolicy)
        self.pushButton_8.setMinimumSize(QtCore.QSize(121, 23))
        self.pushButton_8.setMaximumSize(QtCore.QSize(121, 23))
        self.pushButton_8.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_8.setObjectName("pushButton_8")
        self.title_label_7 = QtWidgets.QLabel(self.frame_3)
        self.title_label_7.setGeometry(QtCore.QRect(10, 138, 91, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label_7.sizePolicy().hasHeightForWidth())
        self.title_label_7.setSizePolicy(sizePolicy)
        self.title_label_7.setMinimumSize(QtCore.QSize(0, 0))
        self.title_label_7.setMaximumSize(QtCore.QSize(611, 36))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title_label_7.setFont(font)
        self.title_label_7.setObjectName("title_label_7")
        self.title_label_9 = QtWidgets.QLabel(self.frame_3)
        self.title_label_9.setGeometry(QtCore.QRect(23, 198, 251, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label_9.sizePolicy().hasHeightForWidth())
        self.title_label_9.setSizePolicy(sizePolicy)
        self.title_label_9.setMinimumSize(QtCore.QSize(0, 0))
        self.title_label_9.setMaximumSize(QtCore.QSize(611, 36))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title_label_9.setFont(font)
        self.title_label_9.setObjectName("title_label_9")
        self.cook_1 = QtWidgets.QSpinBox(self.frame_3)
        self.cook_1.setGeometry(QtCore.QRect(30, 221, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cook_1.sizePolicy().hasHeightForWidth())
        self.cook_1.setSizePolicy(sizePolicy)
        self.cook_1.setMinimumSize(QtCore.QSize(121, 23))
        self.cook_1.setMaximumSize(QtCore.QSize(121, 23))
        self.cook_1.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.cook_1.setMinimum(0)
        self.cook_1.setSingleStep(1)
        self.cook_1.setProperty("value", 0)
        self.cook_1.setDisplayIntegerBase(10)
        self.cook_1.setObjectName("cook_1")
        self.frame_4 = QtWidgets.QFrame(edit_inventory)
        self.frame_4.setGeometry(QtCore.QRect(330, 260, 301, 131))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_4.sizePolicy().hasHeightForWidth())
        self.frame_4.setSizePolicy(sizePolicy)
        self.frame_4.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.frame_4.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.frame_4.setObjectName("frame_4")
        self.title_label_8 = QtWidgets.QLabel(self.frame_4)
        self.title_label_8.setGeometry(QtCore.QRect(10, 10, 171, 36))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title_label_8.sizePolicy().hasHeightForWidth())
        self.title_label_8.setSizePolicy(sizePolicy)
        self.title_label_8.setMinimumSize(QtCore.QSize(0, 0))
        self.title_label_8.setMaximumSize(QtCore.QSize(611, 36))
        font = QtGui.QFont()
        font.setFamily("Rockwell")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.title_label_8.setFont(font)
        self.title_label_8.setObjectName("title_label_8")
        self.products_2 = QtWidgets.QComboBox(self.frame_4)
        self.products_2.setGeometry(QtCore.QRect(16, 49, 200, 22))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.products_2.sizePolicy().hasHeightForWidth())
        self.products_2.setSizePolicy(sizePolicy)
        self.products_2.setMinimumSize(QtCore.QSize(200, 22))
        self.products_2.setMaximumSize(QtCore.QSize(200, 22))
        self.products_2.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.products_2.setObjectName("products_2")
        self.products_2.addItem(icon1, "")
        self.pushButton_9 = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_9.setGeometry(QtCore.QRect(90, 90, 121, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_9.sizePolicy().hasHeightForWidth())
        self.pushButton_9.setSizePolicy(sizePolicy)
        self.pushButton_9.setMinimumSize(QtCore.QSize(121, 23))
        self.pushButton_9.setMaximumSize(QtCore.QSize(121, 23))
        self.pushButton_9.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.pushButton_9.setObjectName("pushButton_9")
        self.label = QtWidgets.QLabel(edit_inventory)
        self.label.setGeometry(QtCore.QRect(400, 430, 141, 101))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("icon/LOGO.png"))
        self.label.setObjectName("label")

        self.retranslateUi(edit_inventory)
        QtCore.QMetaObject.connectSlotsByName(edit_inventory)

        self.pushButton.clicked.connect(self.adding)
        self.pushButton_2.clicked.connect(self.deducting)
        self.pushButton_3.clicked.connect(self.pricing)
        self.pushButton_8.clicked.connect(self.addproduct)
        self.pushButton_9.clicked.connect(self.deleteProduct)

        self.connectDatabase()
        self.productslist()

    def retranslateUi(self, edit_inventory):
        _translate = QtCore.QCoreApplication.translate
        edit_inventory.setWindowTitle(_translate("edit_inventory", "Edit Inventory - IHAWAN SERVICE"))
        self.title_label.setText(_translate("edit_inventory", "<html><head/><body><p align=\"center\">Inventory Edit System</p><p align=\"center\"><br/></p></body></html>"))
        self.quantity.setSuffix(_translate("edit_inventory", " Pieces"))
        self.pushButton.setText(_translate("edit_inventory", "Add"))
        self.pushButton_2.setText(_translate("edit_inventory", "Deduct"))
        self.products.setItemText(0, _translate("edit_inventory", "-- Please select an item --"))
        self.title_label_2.setText(_translate("edit_inventory", "<html><head/><body><p align=\"center\">Edit a Product</p></body></html>"))
        self.title_label_3.setText(_translate("edit_inventory", "<html><head/><body><p align=\"center\">Edit Price</p></body></html>"))
        self.price_2.setSuffix(_translate("edit_inventory", " PHP"))
        self.pushButton_3.setText(_translate("edit_inventory", "Change Pricing"))
        self.quantity_2.setSuffix(_translate("edit_inventory", " Pieces"))
        self.title_label_5.setText(_translate("edit_inventory", "<html><head/><body><p align=\"center\">Add a Product</p></body></html>"))
        self.title_label_6.setText(_translate("edit_inventory", "<html><head/><body><p align=\"center\">Quantity</p></body></html>"))
        self.price_3.setSuffix(_translate("edit_inventory", " PHP"))
        self.addProduct_2.setPlaceholderText(_translate("edit_inventory", "(Add your product here)"))
        self.pushButton_8.setText(_translate("edit_inventory", "Add Product"))
        self.title_label_7.setText(_translate("edit_inventory", "<html><head/><body><p align=\"center\">Price</p></body></html>"))
        self.title_label_9.setText(_translate("edit_inventory", "<html><head/><body><p align=\"center\">Cooking Time (Optional)</p></body></html>"))
        self.cook_1.setSuffix(_translate("edit_inventory", " Minute/s"))
        self.title_label_8.setText(_translate("edit_inventory", "<html><head/><body><p align=\"center\">Delete a Product</p></body></html>"))
        self.products_2.setItemText(0, _translate("edit_inventory", "-- Please select an item --"))
        self.pushButton_9.setText(_translate("edit_inventory", "Delete"))

##### SHORCUT KEYS #####
        self.pushButton_9.setShortcut("Ctrl+D")
        self.pushButton_8.setShortcut("Ctrl+S")
        self.pushButton.setShortcut("Ctrl+I")
        self.pushButton_2.setShortcut("Ctrl+O")
        self.pushButton_3.setShortcut("Ctrl+P")

##### FUNCTIONS #####


    def productslist(self):

        self.mycursor.execute("SELECT productname FROM inventory")
        self.myresult = self.mycursor.fetchall()
        for i in self.myresult:
            self.products.addItems(i)
            self.products_2.addItems(i)


    def adding(self):
        try:
            if self.products.currentIndex() == 0 and self.quantity.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please select/input a data")
                msg.exec_()

            elif self.products.currentIndex() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please select a product")
                msg.exec_()

            elif self.quantity.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please input a quantity")
                msg.exec_()

            else:
                self.asd = self.products.currentText()

                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("Success")
                msg.setText("Added some stock/s to this product " + ">>> " + self.asd )
                msg.exec_()

                self.takeproduct = self.products.currentText()

                sql = "SELECT quantity FROM inventory WHERE productname = %s"
                value= (self.takeproduct,)
                self.mycursor.execute(sql, value)
                self.got = self.mycursor.fetchone()[0]

                update = self.quantity.value()
                currentstock = self.got
                add = update + currentstock

                updatedatabase = "UPDATE inventory SET quantity = %s WHERE productname = %s"
                data = (add, self.takeproduct)
                self.mycursor.execute(updatedatabase, data)

                print("Stock has been updated")

                self.mydb.commit()

                self.products.setCurrentIndex(0)
                self.quantity.setValue(0)




        except:
            print("BIG OOOFF")

    def deducting(self):
        try:
            if self.products.currentIndex() == 0 and self.quantity.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please select/input a data")
                msg.exec_()

            elif self.products.currentIndex() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please select a product")
                msg.exec_()

            elif self.quantity.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please input a quantity")
                msg.exec_()

            else:
                self.asd = self.products.currentText()
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("Success")
                msg.setText("Remove some stock/s to this product " + ">>> " + self.asd)
                msg.exec_()

                self.takeproduct = self.products.currentText()

                sql = "SELECT quantity FROM inventory WHERE productname = %s"
                value = (self.takeproduct,)
                self.mycursor.execute(sql, value)
                self.got = self.mycursor.fetchone()[0]

                update = self.quantity.value()
                currentstock = self.got
                add = currentstock - update

                updatedatabase = "UPDATE inventory SET quantity = %s WHERE productname = %s"
                data = (add, self.takeproduct)
                self.mycursor.execute(updatedatabase, data)

                print("Stock has been updated")

                self.mydb.commit()
                self.products.setCurrentIndex(0)
                self.quantity.setValue(0)
                print("SUCCESS")

        except:
            print("BIG OOOFF")

    def pricing(self):
        try:
            if self.products.currentIndex() == 0 and self.price_2.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please select/input a data")
                msg.exec_()

            elif self.products.currentIndex() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please select a product")
                msg.exec_()

            elif self.price_2.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please input a quantity")
                msg.exec_()

            else:

                self.asd = self.products.currentText()
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("Success")
                msg.setText("Pricing has changed on this product " + ">>> " + self.asd)
                msg.exec_()

                self.changeprice = self.price_2.value()
                self.identify = self.products.currentText()
                print("TEST1")

                sql = "UPDATE inventory SET price = %s WHERE productname = %s"
                value = (self.changeprice, self.identify)
                self.mycursor.execute(sql, value)

                print("Price has been updated")

                self.products.setCurrentIndex(0)
                self.price_2.setValue(0)
                self.mydb.commit()

        except:
            print("Error")

    def addproduct(self):
        try:
            if self.addProduct_2.text() == "" and self.quantity_2.value() == 0 and self.price_3.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please enter/input a value")
                msg.exec_()

            elif self.addProduct_2.text() == "" and self.quantity_2.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please enter a new product and its new stocks")
                msg.exec_()

            elif self.addProduct_2.text() == "" and self.price_3.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please enter a new product and its price")
                msg.exec_()


            elif self.quantity_2.value() == 0 and self.price_3.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please input how many stocks and its price")
                msg.exec_()

            elif self.addProduct_2.text() == "":
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please enter a New product")
                msg.exec_()

            elif self.price_3.value() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please input a price")
                msg.exec_()

            elif self.quantity_2.value() == 0 :
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please input how many stocks")
                msg.exec_()

            else:
                self.addproduct1()


        except:
            print("ERROR ADDING")

    def addproduct1(self):
        ##### get all the updated current products that has been inputted by the user ####
        self.mycursor.execute("SELECT DISTINCT productname FROM inventory")
        self.result90 = self.mycursor.fetchall()

        ##### append all in list from products #####
        ##### used to help the program what to do in the if/else statement #####
        self.column1 = [item[0] for item in self.result90]

        try:
            if self.addProduct_2.text() in self.column1:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Product already in the menu")
                msg.exec_()

                self.addProduct_2.clear()

            else:
                self.add = self.addProduct_2.text()
                self.piraso = self.quantity_2.value()
                self.presyo = self.price_3.value()
                self.cooktime = self.cook_1.value()
                self.update = self.addProduct_2.text()

                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("Success")
                msg.setText("A new product has been added " + ">>> " + self.add)
                msg.exec_()

                sql = "INSERT INTO inventory (productname, quantity, price, minutes) VALUES (%s, %s, %s, %s)"
                values = (self.add, self.piraso, self.presyo, self.cooktime)
                self.mycursor.execute(sql, values)
                self.mydb.commit()

                self.addProduct_2.clear()
                self.quantity_2.setValue(0)
                self.price_3.setValue(0)
                self.cook_1.setValue(0)
                print("INSERTED SUCCESSFULLY")

                self.products.addItem(self.update)
                self.products_2.addItem(self.update)
                #cashier.displayData()


        except:

            print("error")
    def deleteProduct(self):

        try:
            if self.products_2.currentIndex() == 0:
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Warning)
                msg.setWindowTitle("Error")
                msg.setText("Please select a product")
                msg.exec_()

            else:
                self.delete = self.products_2.currentText()
                self.delete1 = self.products_2.currentIndex()

                msg = QMessageBox()
                msg.setIcon(QMessageBox.Information)
                msg.setWindowTitle("Success")
                msg.setText("Product has been deleted " + ">>> " + self.delete)
                msg.exec_()

                sql1 = "DELETE FROM inventory WHERE productname = %s"
                values1 = (self.delete,)
                self.mycursor.execute(sql1, values1)
                self.mydb.commit()

                sql2 = "DELETE FROM transaction WHERE products = %s"
                values2 = (self.delete,)
                self.mycursor.execute(sql2, values2)
                self.mydb.commit()

                self.products_2.removeItem(self.delete1)
                self.products.removeItem(self.delete1)
                self.products_2.setCurrentIndex(0)
                print("PRODCT HAS BEEN DELETED")

        except:
            print("ERROR DELETING PRODUCT")

class closeWindow(QtWidgets.QMainWindow):
    def closeEvent(self, event):
        reply = QMessageBox.question(self, 'Inventory Edit System', 'Are you sure you want to exit?',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()

        else:
            event.ignore()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    edit_inventory = QtWidgets.QWidget()
    edit_inventory = closeWindow()
    ui = Ui_edit_inventory()
    ui.setupUi(edit_inventory)
    edit_inventory.show()
    sys.exit(app.exec_())